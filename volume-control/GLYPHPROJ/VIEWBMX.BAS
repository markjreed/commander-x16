#CONTROLCODES 1
#INCLUDE "/BASIC/INCLUDES/STANDARD.DEF"
#INCLUDE "/BASIC/INCLUDES/DIRSUBS.DEF"

REM PROGRAM STARTS HERE (GOTO MAIN IN STANDARD.BI)
MAIN:
  DEF FN SIGNED.BYTE(N) = N+256*(N>127)
  OB = PEEK(1):BANK PEEK(0),0
  ROM.VERSION=FN SIGNED.BYTE(PEEK($FF80))
## IF ROM.VERSION < 0 THEN PRINT "PRE-RELEASE ROM"
  GOOD.ROM = (ROM.VERSION < -45) OR (ROM.VERSION >= 45)
  IF NOT GOOD.ROM THEN PRINT "{WHT}ROM VERSION {RED}";ROM.VERSION;"{WHT} NOT SUPPORTED. PLEASE UPGRADE.":END
  IF ROM.VERSION < -47 OR ROM.VERSION >= 47 THEN DRAWIMAGE.IS.BANKAWARE = -1 
  ROM.VERSION = ABS(ROM.VERSION)
  BMX.BANKLOADER=$A019
  VPOKE 1,$FA05,13

REM ALLOCATE SPACE FOR THE BMX FILE HEADER
BMX.HDR$=RPT$(32,32)
BMX.HDRSIZE=32
REM SET GRAPHICS MODE
PRINT "LOADING BMX LOADER BIN"
BLOAD "BMXA000.BIN",8,2,$A000
SCREEN $80

START:
  ROOTDIR$=CWD$
  IF MID$(ROOTDIR$,LEN(ROOTDIR$),1) <> "/" THEN ROOTDIR$=ROOTDIR$+"/"
  PALFILE$=ROOTDIR$+"DPAL.BIN"
  CLS
  RECT$ 0,0,319,239 ,$0
  PRINT "{LIGHT GREEN}";CWD$:PRINT
  COLOR 1,0
  LOCATE 15,2:PRINT WHITE$;"ENTER THE WORD ";YELLOW$;"<EXIT>";WHITE$;" TO END."
  LOCATE 1,1
  PRINT:PRINT
  PRINT " ENTER BMX FILENAME ";GREEN$
  PRINT
  IF CALLTIME>0 THEN LOCATE 11,2:PRINT "{WHT}LAST LOADED{GRN}:{LIGHT GREEN} ";BMX$
  IF CALLTIME>0 THEN LOCATE 12,2:PRINT "{WHT}  LOAD TIME{GRN}:{LIGHT GREEN}";CALLTIME;" JIFFIES";
ELOOP:
  IT=4:IX=2:IY=5:ML=37:COLOR 5,11
  GOSUB STRINGGET
  BMXFILE$=IS$
  IF BMXFILE$="" THEN FMDRUM 7,87:GOTO ELOOP
  COLOR 1,0
  PRINT:PRINT
  IF BMXFILE$="EXIT" THEN SHOWHEADER%=FALSE:GOTO SKIP1
  T$=BMXFILE$:S$=".":GOSUB INSTR
  IF ISTR=0 THEN BMXFILE$=BMXFILE$+".BMX"
  F$=BMXFILE$
  GOSUB FILEEXISTS
  IF NOT FE% THEN PRINT " ";"{RED}";BMXFILE$;"{WHT}  NOT FOUND!":SLEEP 90:GOTO START
  BMX$=F$
  GOSUB HIDEGRAPHICS
  RECT 0,0,319,239,0
  WASERROR=0:CLS
  STARTTIME=TI
  BMXFILE$=F$
  GOSUB LOADBMX
SKIPBMX1:
  ENDTIME=TI
  GOSUB SHOWGRAPHICS
  CALLTIME=ENDTIME-STARTTIME
  IF WASERROR THEN SLEEP 90:GOTO START

FLUSHKEYS:
  GET X$:IF X$<>"" THEN FLUSHKEYS
GETKEY:
  GET X$:IF X$="" THEN GETKEY
 IF X$=CHR$(27) THEN SKIP1
 IF X$=CHR$(133) THEN SHOWHEADER%=NOT SHOWHEADER%:CLS
 IF X$=CHR$(133) AND SHOWHEADER% THEN PRINT:PRINT:GOSUB SHOWHEADERINFO
 IF X$=CHR$(133) THEN GETKEY
 J=10
 JJ=INT(RND(.)*11) + 1
 VPOKE 1,$FA00,0
 VPOKE 1,$FA01,0
 ON JJ GOSUB LEFT2RIGHT, RIGHT2LEFT,PAL2BLACK,TOP2BOTTOM,BOTTOM2TOP, ALTLINEWIPE,CIRCULARWIPE,BAR1WIPE,BLOCKWIPE,DIAGONALWIPE,RDIAGONALWIPE
 RECT 0,0,XLIMIT,YLIMIT,0
 GOSUB SETDEFPAL
 GOTO START
SKIP1:
   RECT 0,0,XLIMIT,YLIMIT,0
   GOSUB SETDEFPAL
   VPOKE 1,$FA05,13
   IF SHOWHEADER% THEN SLEEP 180
   IF NOT SHOWHEADER% THEN SCREEN 1
  END



SHOWHEADERINFO:
   PRINT WHITE$;"BMX FILE: ";GREEN$;F$;WHITE$
   PRINT RPT$(ASC("-"),LEN(F$)+10)
   PRINT
   PRINT "        BMX HEADER ID: {GRN}";BMX.ID$;"{WHT}"
   PRINT "          BMX VERSION: {GRN}";ASC(MID$(BMX.HDR$,4,1));"{WHT}"
   PRINT "            BIT DEPTH: {GRN}";ASC(MID$(BMX.HDR$,5,1));"{WHT}"
   PRINT "       VERA DEPTH REG: {GRN}";BMX.VERA.REG;"{WHT}"
   PRINT "                WIDTH: {GRN}";BMX.WIDTH;"{WHT}"
   PRINT "               HEIGHT: {GRN}";BMX.HEIGHT;"{WHT}"
   PRINT " PALLETE ENTRIES USED: {GRN}";BMX.PALUSED;"{WHT}"
   PRINT "      PAL INDEX START: {GRN}";BMX.FIRSTPAL;"{WHT}"
   PRINT " IMG DATA FILE OFFSET: {GRN}";BMX.FILE.OFFSET;"{WHT}"
   PRINT "    IMAGE COMPRESSION:  {GRN}";
   IF BMX.COMPRESS <> 0 THEN PRINT "LZSA":GOTO ENDHSHOW
   PRINT "NONE"
ENDHSHOW:
   PRINT "{WHT}"
RETURN

LOADBMX:
     OPEN 4,8,4,BMXFILE$+",S,R"
     POKE X.REG, 4
     SYS CHKIN
     POKE A.REG, 32
## GET A POINTER TO THE BMX.HDR STRING THEN PEEK
## IT FOR THE ADDRESS TO THE STRING DATA
     A=POINTER(BMX.HDR$)+1
     POKE X.REG, PEEK(A)
     POKE Y.REG, PEEK(A+1)
     POKE C.REG, 0
     SYS MACPTR
     SYS CLRCHN
     WASERROR = 0
     DOSHOW = 0
     GOSUB PARSEHEADER
     IF BMX.ID$<>"BMX" THEN ERRMSG$= "{RED}"+F$+"{WHT} IS NOT A BMX FILE":GOTO ERR.EXIT1
     IF BMX.BITS<>8 THEN ERRMSG$= "{RED}"+STR$(BMX.BITS)+"{WHT} BITS NOT SUPPORTED":GOTO ERR.EXIT1
     IF BMX.VER<>1 THEN ERRMSG$= "{RED}"+F$+"{WHT} IS VERSION:{RED}"+STR$(BMX.VER)+"{WHT} NOT SUPPORTED!":GOTO ERR.EXIT1
     IF BMX.WIDTH > 320 THEN ERRMSG$= "{RED}"+STR$(BMX.WIDTH)+"{WHT} WIDTH NOT CURRENTLY SUPPORTED":GOTO ERR.EXIT1
     POKE R0L, FN Lo.Byte(BMX.WIDTH)
     POKE R0H, FN Hi.Byte(BMX.WIDTH)
     POKE R1L, FN Lo.Byte(BMX.HEIGHT)
     POKE R1H, FN Hi.Byte(BMX.HEIGHT)
     POKE R2L, BMX.PALUSED
     POKE R2H, BMX.FIRSTPAL
     BANK 2
     SYS BMX.BANKLOADER
RETURN


ERR.EXIT1:
 CLOSE 4:SYS CLRCHN
ERR.EXIT:
 PRINT:PRINT " ";ERRMSG$:WASERROR=-1:RETURN

PARSEHEADER:
    BMX.ID$=LEFT$(BMX.HDR$,3)
    BMX.VER=ASC(MID$(BMX.HDR$,4,1))
    BMX.BITS = ASC(MID$(BMX.HDR$,5,1))
    BMX.VERA.REG=ASC(MID$(BMX.HDR$,6,1))
    BMX.WIDTH = ASC(MID$(BMX.HDR$,7,1)) + (ASC(MID$(BMX.HDR$,8,1))*256)
    BMX.HEIGHT = ASC(MID$(BMX.HDR$,9,1)) + (ASC(MID$(BMX.HDR$,10,1))*256)
    BMX.PALUSED = ASC(MID$(BMX.HDR$,11,1))
    BMX.FIRSTPAL = ASC(MID$(BMX.HDR$,12,1))
    BMX.FILE.OFFSET = ASC(MID$(BMX.HDR$,13,1))+(ASC(MID$(BMX.HDR$,14,1))*256)
    BMX.COMPRESS= ASC(MID$(BMX.HDR$,15,1))
   RETURN




## BELOW IS CODE FOR VARIOUS FADE TRANSITIONS

REM SET THE PALLETTE TO ALL BLACK
PAL2BLACK:
    FOR A=$FA00 TO $FBFF:VPOKE 1,A,0:NEXT A:RETURN

LEFT2RIGHT:
   FOR X = 0 TO XLIMIT
       LINE X,0,X,YLIMIT,0
       FOR D=1 TO J:NEXT D
   NEXT X
   RETURN

RIGHT2LEFT:
   FOR X = XLIMIT TO 0 STEP -1
       LINE X,0,X,YLIMIT,0
       FOR D=1 TO J:NEXT D
   NEXT X
   RETURN

TOP2BOTTOM:
   FOR Y=0 TO YLIMIT
       LINE 0,Y,XLIMIT,Y,0
       FOR D=1 TO J:NEXT D
   NEXT
   RETURN

BOTTOM2TOP:
   FOR Y=YLIMIT TO 0 STEP -1
       LINE 0,Y,XLIMIT,Y,0
       FOR D=1 TO J:NEXT D
   NEXT
   RETURN

ALTLINEWIPE:
   FOR Y = 0 TO YLIMIT STEP 4
       LINE 0,Y,XLIMIT,Y,0
       FOR D=1 TO J:NEXT D
   NEXT Y
   FOR Y = YLIMIT TO 0 STEP -3
       LINE 0,Y,XLIMIT,Y,0
       FOR D=1 TO J:NEXT D
   NEXT Y
   FOR Y = 0 TO YLIMIT STEP 2
       LINE 0,Y,XLIMIT,Y,0
       FOR D=1 TO J:NEXT D
   NEXT Y
   FOR Y = YLIMIT TO 0 STEP -2
       LINE 0,Y,XLIMIT,Y,0
       FOR D=1 TO J:NEXT D
   NEXT Y
   RETURN

CIRCULARWIPE:
    OX=(XLIMIT+1)/2
    OY=(YLIMIT+1)/2

    FOR X2 = OX TO XLIMIT
        LINE OX,OY,X2,0,0
    NEXT X2

    FOR Y2 = 0 TO YLIMIT
        LINE OX,OY,XLIMIT,Y2,0
    NEXT Y2

    FOR X2 = XLIMIT TO 0 STEP -1
        LINE OX,OY,X2,YLIMIT,0
    NEXT X2

    FOR Y2 = YLIMIT TO O STEP -1
        LINE OX,OY,0,Y2,0
    NEXT Y2

    FOR X2 = O TO OX
        LINE OX,OY,X2,0,0
    NEXT X2
    RETURN

BAR1WIPE:
  FOR Y = 0 TO 230 STEP 10
      FOR X = 0 TO 310 STEP 20
          RECT X,Y,X+9,Y+9,0
      NEXT X
  NEXT Y
  FOR Y = 0 TO 230 STEP 10
      FOR X = 10 TO 310 STEP 20
          RECT X,Y,X+9,Y+9,0
      NEXT X
  NEXT Y
  RETURN

BLOCKWIPE:
   FOR Y = 0 TO 230 STEP 10
       X2=0
       IF Y/20 = INT(Y/20) THEN X2=10
       FOR X = X2 TO 310 STEP 20
           RECT X,Y,X+9,Y+9,0
           FOR D=1 TO J:NEXT D
       NEXT X
   NEXT Y
   FOR Y = 230 TO 0 STEP -10
       X2=10
       IF Y/20 = INT(Y/20) THEN X2=0
       FOR X = X2 TO 310 STEP 20
           RECT X,Y,X+9,Y+9,0
           FOR D=1 TO J:NEXT D
       NEXT X
   NEXT Y
   RETURN

RDIAGONALWIPE:
  X1=XLIMIT:X2=XLIMIT:Y1=YLIMIT:Y2=YLIMIT
RDLOOP1:
  LINE X1,Y1,X2,Y2,0
  IF X1>0 THEN X1=X1-1
  IF Y2>0 THEN Y2=Y2-.75
  IF Y2<0 THEN Y2=0
  IF X1>0 OR Y2>0 THEN RDLOOP1
RDLOOP2:
  LINE X1,Y1,X2,Y2,0
  IF Y1>0 THEN Y1=Y1-.75
  IF Y1<0 THEN Y1=0
  IF X2>0 THEN X2=X2-1
  IF X2>0 OR Y1>0 THEN RDLOOP2
  RETURN

DIAGONALWIPE:
  X1=0:X2=0:Y1=0:Y2=0
DLOOP1:
  LINE X1,Y1,X2,Y2,0
  IF X2<XLIMIT THEN X2=X2+1
  IF Y1<YLIMIT THEN Y1=Y1+.75
  IF Y1>YLIMIT THEN Y1=YLIMIT
  IF X2<XLIMIT OR Y1<YLIMIT THEN DLOOP1
DLOOP2:
  LINE X1,Y1,X2,Y2,0
  IF Y2<YLIMIT THEN Y2=Y2+.75
  IF Y2>YLIMIT THEN Y2=YLIMIT
  IF X1<XLIMIT THEN X1=X1+1
  IF X1<XLIMIT OR Y2<YLIMIT THEN DLOOP2
  RETURN

SETDEFPAL:
      F$=PALFILE$:GOSUB FILEEXISTS
      IF FE% THEN BVLOAD F$,8,1,$FA00:RETURN
      POKE $9F20, 0
      POKE $9F21, $FA
      POKE $9F22, %00010001
      RESTORE PALDATA
REM LOOP THROUGH THE PALLETTE ADDRESS SPACE
REM AND POKE THE VERA DEFAULT PALLETTE
      FOR PE = 1 TO 256
          READ R:READ GB
          POKE $9F23,GB
          POKE $9F23,R
      NEXT PE
      RETURN

REM DEFAULT VERA PALLETTE AS DATA. FROM 0 TO 255 (2 BYTES EACH ENTRY)RGB
PALDATA:
      DATA $00,$00,$0F,$FF,$08,$00,$0A,$FE,$0C,$4C,$00,$C5,$00,$0A,$0E,$E7,$0D
      DATA $85,$06,$40,$0F,$77,$03,$33,$07,$77,$0A,$F6,$00,$8F,$0B,$BB,$00,$00
      DATA $01,$11,$02,$22,$03,$33,$04,$44,$05,$55,$06,$66,$07,$77,$08,$88,$09
      DATA $99,$0A,$AA,$0B,$BB,$0C,$CC,$0D,$DD,$0E,$EE,$0F,$FF,$02,$11,$04,$33
      DATA $06,$44,$08,$66,$0A,$88,$0C,$99,$0F,$BB,$02,$11,$04,$22,$06,$33,$08
      DATA $44,$0A,$55,$0C,$66,$0F,$77,$02,$00,$04,$11,$06,$11,$08,$22,$0A,$22
      DATA $0C,$33,$0F,$33,$02,$00,$04,$00,$06,$00,$08,$00,$0A,$00,$0C,$00,$0F
      DATA $00,$02,$21,$04,$43,$06,$64,$08,$86,$0A,$A8,$0C,$C9,$0F,$EB,$02,$11
      DATA $04,$32,$06,$53,$08,$74,$0A,$95,$0C,$B6,$0F,$D7,$02,$10,$04,$31,$06
      DATA $51,$08,$62,$0A,$82,$0C,$A3,$0F,$C3,$02,$10,$04,$30,$06,$40,$08,$60
      DATA $0A,$80,$0C,$90,$0F,$B0,$01,$21,$03,$43,$05,$64,$07,$86,$09,$A8,$0B
      DATA $C9,$0D,$FB,$01,$21,$03,$42,$04,$63,$06,$84,$08,$A5,$09,$C6,$0B,$F7
      DATA $01,$20,$02,$41,$04,$61,$05,$82,$06,$A2,$08,$C3,$09,$F3,$01,$20,$02
      DATA $40,$03,$60,$04,$80,$05,$A0,$06,$C0,$07,$F0,$01,$21,$03,$43,$04,$65
      DATA $06,$86,$08,$A8,$09,$CA,$0B,$FC,$01,$21,$02,$42,$03,$64,$04,$85,$05
      DATA $A6,$06,$C8,$07,$F9,$00,$20,$01,$41,$01,$62,$02,$83,$02,$A4,$03,$C5
      DATA $03,$F6,$00,$20,$00,$41,$00,$61,$00,$82,$00,$A2,$00,$C3,$00,$F3,$01
      DATA $22,$03,$44,$04,$66,$06,$88,$08,$AA,$09,$CC,$0B,$FF,$01,$22,$02,$44
      DATA $03,$66,$04,$88,$05,$AA,$06,$CC,$07,$FF,$00,$22,$01,$44,$01,$66,$02
      DATA $88,$02,$AA,$03,$CC,$03,$FF,$00,$22,$00,$44,$00,$66,$00,$88,$00,$AA
      DATA $00,$CC,$00,$FF,$01,$12,$03,$34,$04,$56,$06,$68,$08,$8A,$09,$AC,$0B
      DATA $CF,$01,$12,$02,$24,$03,$46,$04,$58,$05,$6A,$06,$8C,$07,$9F,$00,$02
      DATA $01,$14,$01,$26,$02,$38,$02,$4A,$03,$5C,$03,$6F,$00,$02,$00,$14,$00
      DATA $16,$00,$28,$00,$2A,$00,$3C,$00,$3F,$01,$12,$03,$34,$05,$46,$07,$68
      DATA $09,$8A,$0B,$9C,$0D,$BF,$01,$12,$03,$24,$04,$36,$06,$48,$08,$5A,$09
      DATA $6C,$0B,$7F,$01,$02,$02,$14,$04,$16,$05,$28,$06,$2A,$08,$3C,$09,$3F
      DATA $01,$02,$02,$04,$03,$06,$04,$08,$05,$0A,$06,$0C,$07,$0F,$02,$12,$04
      DATA $34,$06,$46,$08,$68,$0A,$8A,$0C,$9C,$0F,$BE,$02,$11,$04,$23,$06,$35
      DATA $08,$47,$0A,$59,$0C,$6B,$0F,$7D,$02,$01,$04,$13,$06,$15,$08,$26,$0A
      DATA $28,$0C,$3A,$0F,$3C,$02,$01,$04,$03,$06,$04,$08,$06,$0A,$08,$0C,$09
      DATA $0F,$0B


#INCLUDE "/BASIC/INCLUDES/STANDARD.BI"
#INCLUDE "/BASIC/INCLUDES/DIRSUBS.BI"
